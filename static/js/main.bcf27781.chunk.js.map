{"version":3,"sources":["js/constants/action-types.js","js/reducers/index.js","js/store/index.js","js/actions/index.js","js/components/stateToCards.js","js/components/SaveList.js","js/components/Toolbar.js","img/red-circle.png","js/components/CardNotes.js","js/components/SingleParagraph.js","js/components/SidePanel.js","js/components/TopToolbar.js","js/components/Editor.js","js/components/App.js","index.js"],"names":["RESET_STATE","CHANGE_CARD_NUMBER","CHANGE_NOTE_NUMBER","ADD_CARD","EDIT_PARAGRAPH","DELETE_CARD","ADD_NOTE","EDIT_NOTE","DELETE_NOTE","UPDATE_DECK_ELEMENTS","UPDATE_AUDIO","defaultState","sidePanelWidth","width","showReading","showAudio","showFontColor","showEmphasisColor","edit","currentCardNumber","currentNoteNumber","cardIterate","cards","cardNumber","fontColor","emphasisColor","paragraph","audioPath","noteIterate","notes","noteNumber","wordPhrase","reading","definition","emphasis","emphasisPhrase","closed","hint","emptyNote","emptyCard","setInitialState","JSON","parse","window","localStorage","getItem","saveStateToLocalStorage","state","setItem","stringify","addNotesToCurrentCard","newNotes","map","singleCard","Object","assign","updateCurrentCard","theUpdate","rootReducer","action","type","newState","payload","newCardsAudio","newCardsEditNote","newCardsEditParagraph","stateWithCard","fromEntries","entries","newCardIterate","oneNewCard","newCardsAddCard","concat","console","log","newCardsDeleteCard","filter","oneCard","newCurrentCardNumber","newNoteIterate","currentCard","oneNewNote","currentNotes","newCardsAddNote","oneNote","newCardsDeleteNote","store","createStore","addNote","editNote","updateDeckElements","makeExpPara","stringsColoredEmp","currentPhraseRegex","RegExp","arrayOfStringCurrentPhrase","indexStrEmp","splitForPhrase","indexSecond","text","split","push","addNoteHighlight","currentParagraph","noteEmphasisRegex","arrayOfStringsEmphasis","index","addEmphasis","cleanText","oneStringMap","join","initialText","replace","trim","makeRestOfCard","card","exportParagraph","noteAnswer","makeReading","audio","makeAudio","SaveList","list","today","Date","dd","String","getDate","padStart","mm","getMonth","theDateCards","getFullYear","useState","downloadLink","setDownloadLink","useEffect","data","Blob","URL","revokeObjectURL","createObjectURL","makeTextFile","download","href","className","ToolbarDisplay","props","resetState","bind","addCard","deleteCard","exportState","updateNote","handleClose","updatedMap","this","singleNote","event","confirm","currentState","newCards","i","cardsForExportOneCard","ni","restOfCard","xi","compiledNotes","Array","thisCardsNote","zi","madeBlue","unshift","cardMaps","cardString","cardMapToString","flat","stateToCards","currentNoteClosed","currentNoteEmphasis","id","value","onClick","handleEmphasis","Component","Toolbar","connect","currentNote","dispatch","noteInfo","nothing","newDeckElements","NoteDisplay","deleteNote","liStyle","changeCurrentNoteNumber","handleWordPhrase","wordPhraseClass","newMap","target","currentNoteEmphasisPhrase","closeNow","currentNoteHint","borderColor","borderStyle","slice","reverse","el","currentKey","style","alt","src","redCircle","placeholder","onChange","handleReading","handleDefinition","handleEmphasisPhrase","handleHint","CardNotes","currentNotePhrase","notesNoteNumber","changeNoteNumber","newNoteNumberInfo","OneParagraph","handleChange","handleAudioChange","editButton","editClick","quote","updateAudio","editParagraph","regex","includes","color","SingleParagraph","audioMap","CardList","handleClick","handleCloseNav","handleOpenNav","setState","currendCardNumber","cardIndex","SidePanel","currentCardIndex","findIndex","x","CountComp","currentCount","cardDown","theCount","newCardIndexNumber","newCardNumber","cardCount","length","totalCards","cardUp","handleAudio","TopToolbar","ConnectedEditor","currentCardNumberValid","handleWholeClick","someTest","Editor","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcf27781.chunk.js","sourcesContent":["// src/js/constants/action-types.js\n\nexport const RESET_STATE = \"RESET_STATE\";\nexport const CHANGE_CARD_NUMBER = \"CHANGE_CARD_NUMBER\";\nexport const CHANGE_NOTE_NUMBER = \"CHANGE_NOTE_NUMBER\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const EDIT_PARAGRAPH = \"EDIT_PARAGRAPH\";\nexport const DELETE_CARD = \"DELETE_CARD\";\nexport const ADD_NOTE = \"ADD_NOTE\";\nexport const EDIT_NOTE = \"EDIT_NOTE\";\nexport const DELETE_NOTE = \"DELETE_NOTE\";\nexport const UPDATE_DECK_ELEMENTS = \"UPDATE_DECK_ELEMENTS\";\nexport const SWITCH_EDIT = \"SWITCH_EDIT\";\nexport const UPDATE_AUDIO = \"UPDATE_AUDIO\";\n","import { ADD_CARD } from \"../constants/action-types\";\nimport { EDIT_PARAGRAPH } from \"../constants/action-types\";\nimport { DELETE_CARD } from \"../constants/action-types\";\nimport { ADD_NOTE } from \"../constants/action-types\";\nimport { EDIT_NOTE } from \"../constants/action-types\";\nimport { DELETE_NOTE } from \"../constants/action-types\";\nimport { CHANGE_CARD_NUMBER } from \"../constants/action-types\";\nimport { CHANGE_NOTE_NUMBER } from \"../constants/action-types\";\nimport { UPDATE_DECK_ELEMENTS } from \"../constants/action-types\";\nimport { RESET_STATE } from \"../constants/action-types\";\nimport { UPDATE_AUDIO } from \"../constants/action-types\";\n\nconst defaultState = {\n  sidePanelWidth: {width: \"0px\"},\n  showReading: false,\n  showAudio: false,\n  showFontColor: false,\n  showEmphasisColor: false,\n  edit: true,\n  currentCardNumber: 0,\n  currentNoteNumber: 0,\n  cardIterate: 0,\n  cards: [{cardNumber: 0,\n           fontColor: \"#0000ff\",\n           emphasisColor: \"#008000\",\n           paragraph:  \"\",\n           audioPath: \"[sound:a.mp3]\",\n           noteIterate: 0,\n           notes:  [{noteNumber: 0,\n                       wordPhrase: \"\",\n                       reading: \"\",\n                       definition: \"\",\n                       emphasis: false,\n                       emphasisPhrase: \"\",\n                       closed: false,\n                       hint:  \"\"}]}]};\n\n/*const testState = {\n edit: false,\n currentNoteEmphasisPhrase: \"cuando podamos\",\n currentNoteClosed: false,\n currentNoteEmphasis: false,\n currentNoteHint: \"when we can\",\n currentNotePhrase: \"when we can\",\n currentCardNumber: 0,\n currentNoteNumber: 0,\n cardIterate: 0,\n cards: [{cardNumber: 0,\n          fontColor: \"#0000ff\",\n          emphasisColor: \"#008000\",\n          paragraph:  \"Necesitamos ayudar a otras personas cuando podamos.\",\n          audioPath: \"[sound:a.mp3]\",\n          noteIterate: 0,\n          notes:  [\n            {noteNumber: 0,\n            wordPhrase: \"cuando podamos\",\n            reading: \"\",\n            definition: \"when we can\",\n            emphasis: false,\n            emphasisPhrase: \"\",\n            closed: true,\n            hint:  \"when we can\"},\n          {noteNumber: 1,\n            wordPhrase: \"Necesitamos ayudar\",\n            reading: \"\",\n            definition: \"we need help\",\n            emphasis: false,\n            emphasisPhrase: \"\",\n            closed: false,\n            hint:  \"when we can\"}]},\n      {cardNumber: 1,\n       fontColor: \"#0000ff\",\n       emphasisColor: \"#008000\",\n       paragraph:  \"Mientras Germán se va alejando de Colombia, con todo e isla, escucha por las tardes en su vieja grabadora a Beethoven y lee las montañas de diario que recoge en Saravena. A la gente no le preocupa irse para el otro lado, pues nunca uno será venezolano , dice, pese a que de allí reciben la gasolina más barata y la televisión.\",\n       audioPath: \"[sound:a.mp3]\",\n       noteIterate: 0,\n       notes:  [\n         {noteNumber: 0,\n         wordPhrase: \"se va alejando de Colombia\",\n         reading: \"\",\n         definition: \"go far away\",\n         emphasis: false,\n         emphasisPhrase: \"\",\n         closed: false,\n         hint:  \"\"},\n       {noteNumber: 1,\n         wordPhrase: \"vieja\",\n         reading: \"\",\n         definition: \"old\",\n         emphasis: true,\n         emphasisPhrase: \"grabadora\",\n         closed: true,\n         hint:  \"old\"}]}]};\n*/\nconst emptyNote = {noteNumber: 0,\n            wordPhrase: \"\",\n            reading: \"\",\n            definition: \"\",\n            emphasis: false,\n            emphasisPhrase: \"\",\n            closed: false,\n            hint:  \"\"}\n\nconst emptyCard = {\n  cardNumber: 0,\n   fontColor: \"#0000ff\",\n   emphasisColor: \"#008000\",\n   paragraph:  \"\",\n   audioPath: \"[sound:a.mp3]\",\n   noteIterate: 0,\n   notes:  [{noteNumber: 0,\n               wordPhrase: \"\",\n               reading: \"\",\n               definition: \"\",\n               emphasis: false,\n               emphasisPhrase: \"\",\n               closed: false,\n               hint:  \"\"}]}\n\n// this will be executed on first load\nfunction fetchStateFromLocalStorage() {\n  const state=JSON.parse(window.localStorage.getItem('state'));\n  return state\n}\n\nfunction setInitialState() {\n  if (JSON.parse(window.localStorage.getItem('state')) !== null) {\n    return fetchStateFromLocalStorage()\n  }\n  else {\n    return defaultState\n  }\n}\n\n// this will be executed with every update\nfunction saveStateToLocalStorage(state) {\n  window.localStorage.setItem('state', JSON.stringify(state));\n  return true\n}\n\n/////////////////////////////////////////////////////////\n\n    // takes an array of notes\nfunction addNotesToCurrentCard(state, newNotes) {\n  let newCards=[];\n   newCards = state.cards.map(singleCard => {\n    if (singleCard.cardNumber === state.currentCardNumber) {\n       return Object.assign({}, singleCard, {notes: newNotes})}\n    else { return singleCard;}});\n    return newCards\n}\n\n// the update should be a json object ex {paragraph: \"cat\"}\nfunction updateCurrentCard(state, theUpdate) {\n  let newCards=[];\n   newCards = state.cards.map(singleCard => {\n    if (singleCard.cardNumber === state.currentCardNumber) {\n       return Object.assign({}, singleCard, theUpdate)}\n    else { return singleCard;}});\n    return newCards\n}\n\n// add updated card to cards in state\n//////////////////////////////////////////\n//////////////////////\n//////////////////////\n\n\nfunction rootReducer(state = setInitialState(), action) {\n\n\n// gets {currentNoteNumber: noteNumber,\n//              currentNotePhrase: wordPhrase,\n//              emphasis: emphasis,\n//              emphasisPhrase: emphasisPhrase,\n//              closed: closed}\n  if (action.type === CHANGE_NOTE_NUMBER) {\n//    const newCardsNoteNumber = updateCurrentCard(state, action.payload)\n    const newState = Object.assign({}, state, action.payload);\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n  if (action.type === UPDATE_AUDIO) {\n    let newCardsAudio = updateCurrentCard(state, action.payload)\n    const newState= Object.assign({}, state, {cards: newCardsAudio})\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n  if (action.type === RESET_STATE) {\n    const newState=defaultState;\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n\n// will takes the notes provided and replace them in the state\n// expects a map of {notes: newNotesArray}\n  if (action.type === EDIT_NOTE) {\n    let newCardsEditNote= addNotesToCurrentCard(state, action.payload.notes);\n    const newState= Object.assign({}, state, {cards: newCardsEditNote})\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n  if (action.type === EDIT_PARAGRAPH) {\n    let newCardsEditParagraph=[];\n     newCardsEditParagraph = state.cards.map(singleCard => {\n      if (singleCard.cardNumber === state.currentCardNumber) {\n         return Object.assign({}, singleCard, action.payload )\n       }\n      else {\n        return singleCard;\n      }});\n    const newState=Object.assign({}, state, {cards: newCardsEditParagraph});\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\nif (action.type === CHANGE_CARD_NUMBER) {\n  let stateWithCard=Object.fromEntries(Object.entries(state).map(([ key, val ]) => [ key, val ]));\n  const newState = Object.assign({}, stateWithCard, action.payload);\n  saveStateToLocalStorage(newState);\n  return newState;\n}\n\n\n/// expect a map of items in the outter most layer (the deck)\nif (action.type === UPDATE_DECK_ELEMENTS) {\n     const newState = Object.assign({}, state, action.payload);\n     saveStateToLocalStorage(newState);\n     return newState;\n}\n\n\n  if (action.type === ADD_CARD) {\n    let newCardIterate = state.cardIterate + 1;\n    let oneNewCard = Object.assign({}, emptyCard, {cardNumber: newCardIterate});\n    const newCardsAddCard = state.cards.concat(oneNewCard);\n    const newState=Object.assign({}, state, {edit: true,\n                                             currentCardNumber: newCardIterate,\n                                             cards: newCardsAddCard,\n                                             cardIterate: newCardIterate  });\n    console.log(\"newState.edit\")                                             \n\n     console.log(newState.edit)\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n  if (action.type === DELETE_CARD) {\n    let newCardsDeleteCard = state.cards.filter(oneCard => {\n      if (oneCard.cardNumber === state.currentCardNumber) { return null}\n      else return oneCard\n    })\n    if (typeof newCardsDeleteCard[0] !== \"undefined\" && typeof newCardsDeleteCard[0].cardNumber === \"number\") {\n          var newCurrentCardNumber = newCardsDeleteCard[0].cardNumber\n    }\n    else {var newCurrentCardNumber = 0}\n\n    const newState=Object.assign({}, state, {cards: newCardsDeleteCard,\n                                            currentCardNumber: newCurrentCardNumber});\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n\n\n  if (action.type === ADD_NOTE) {\n    let newNoteIterate = action.payload.currentCard.noteIterate + 1;\n    let oneNewNote = Object.assign({}, emptyNote, {noteNumber: newNoteIterate});\n    let newNotes = action.payload.currentNotes.concat(oneNewNote)\n    //const currentCard = action.payload.currentCard;\n    //const newCurrentCard = Object.assign({}, currentCard, {noteIterate: newNoteIterate,\n    //                                                        notes: newNotes});\n\n    let newCardsAddNote= updateCurrentCard(state, {noteIterate: newNoteIterate,\n                                                     notes: newNotes});\n    const newState=Object.assign({}, state, {currentNoteNumber: newNoteIterate,\n                                             cards: newCardsAddNote});\n    saveStateToLocalStorage(newState);\n    return newState;\n    };\n\n///gets  {noteNumber: noteNumber, currentNotes: this.props.notes}\n  if (action.type === DELETE_NOTE) {\n    let newNotes = action.payload.currentNotes.filter(oneNote => {\n      if (oneNote.noteNumber === action.payload.noteNumber) { return null}\n      else return oneNote\n    })\n    let newCardsDeleteNote= updateCurrentCard(state, {notes: newNotes});\n    const newState=Object.assign({}, state, {cards: newCardsDeleteNote});\n    saveStateToLocalStorage(newState);\n    return newState;\n  }\n  return state;\n}\n\nexport default rootReducer;\n","// src/js/store/index.js\n\nimport { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","// src/js/actions/index.js\n\nimport { EDIT_PARAGRAPH } from \"../constants/action-types\";\nimport { CHANGE_CARD_NUMBER } from \"../constants/action-types\";\nimport { CHANGE_NOTE_NUMBER } from \"../constants/action-types\";\nimport { EDIT_NOTE } from \"../constants/action-types\";\nimport { ADD_NOTE } from \"../constants/action-types\";\nimport { DELETE_NOTE } from \"../constants/action-types\";\nimport { ADD_CARD } from \"../constants/action-types\";\nimport { DELETE_CARD } from \"../constants/action-types\";\nimport { UPDATE_DECK_ELEMENTS } from \"../constants/action-types\";\nimport { RESET_STATE } from \"../constants/action-types\";\nimport { SWITCH_EDIT } from \"../constants/action-types\";\nimport { UPDATE_AUDIO } from \"../constants/action-types\";\n\n\n\nexport function switchEdit(payload) {\n  return { type: SWITCH_EDIT, payload }\n};\n\nexport function updateAudio(payload) {\n  return { type: UPDATE_AUDIO, payload }\n};\n\nexport function deleteNote(payload) {\n  return { type: DELETE_NOTE, payload }\n};\n\nexport function addNote(payload) {\n  return { type: ADD_NOTE, payload }\n};\n\nexport function deleteCard(payload) {\n  return { type: DELETE_CARD, payload }\n};\n\nexport function addCard(payload) {\n  return { type: ADD_CARD, payload }\n};\n\nexport function resetState(payload) {\n  return { type: RESET_STATE, payload }\n};\n\nexport function editParagraph(payload) {\n  return { type: EDIT_PARAGRAPH, payload };\n}\n\nexport function changeCardNumber(payload) {\n  return { type: CHANGE_CARD_NUMBER, payload };\n}\nexport function changeNoteNumber(payload) {\n  return { type: CHANGE_NOTE_NUMBER, payload };\n}\n\nexport function editNote(payload) {\nreturn { type: EDIT_NOTE, payload };\n}\n\nexport function updateDeckElements(payload) {\nreturn { type: UPDATE_DECK_ELEMENTS, payload };\n}\n","function cardMapToString(cardMaps) {\n  var cardString=\"\";\n  for (var i in cardMaps) {\n    cardString=cardString + cardMaps[i].paragraph + \"\\t\" + cardMaps[i].noteAnswer + \"\\t\" + cardMaps[i].audio + \"\\n\";\n  }\n  return cardString;\n}\n\nfunction addEmphasis(currentParagraph, oneNote) {\n  var noteEmphasisRegex = new RegExp(\"(\" + oneNote.emphasisPhrase + \")\");\n  var arrayOfStringsEmphasis = [];\n  if (oneNote.emphasisPhrase !== \"\") {\n    arrayOfStringsEmphasis = currentParagraph.split(noteEmphasisRegex);\n  } else {\n      arrayOfStringsEmphasis.push(currentParagraph);\n  }\n  var stringsColoredEmp = []\n  for (var index in arrayOfStringsEmphasis) {\n    if (oneNote.emphasis && arrayOfStringsEmphasis[index]===oneNote.emphasisPhrase) {\n      stringsColoredEmp.push({type: \"emphasis\",\n                              text: arrayOfStringsEmphasis[index]})\n    }\n    else {\n      stringsColoredEmp.push({type: \"normal\",\n                              text: arrayOfStringsEmphasis[index]})\n    }\n  }\n  return stringsColoredEmp\n}\n\nfunction addNoteHighlight(stringsColoredEmp, oneNote){\n  var currentPhraseRegex = new RegExp(\"(\" + oneNote.wordPhrase + \")\");\n  var arrayOfStringCurrentPhrase = [];\n  for (var indexStrEmp in stringsColoredEmp) {\n    var splitForPhrase=[];\n    splitForPhrase = stringsColoredEmp[indexStrEmp].text.split(currentPhraseRegex);\n    for (var indexSecond in splitForPhrase) {\n      if (splitForPhrase[indexSecond] === oneNote.wordPhrase) {\n        if (oneNote.closed) {\n          arrayOfStringCurrentPhrase.push({type: \"wordPhrase\",\n                                         text: \"(\" + oneNote.hint + \") \"})\n        }\n        else {\n          arrayOfStringCurrentPhrase.push({type: \"wordPhrase\",\n                                         text: splitForPhrase[indexSecond]})\n                                       }\n      }\n      else {\n        arrayOfStringCurrentPhrase.push({type: stringsColoredEmp[indexStrEmp].type,\n                                         text: splitForPhrase[indexSecond]})\n      }\n    }\n  }\n  return arrayOfStringCurrentPhrase\n}\n\nfunction makeExpPara(oneCard, oneNote) {\n  /// requirements for a card are having a paragraph, having wordPhrase and having a Definition\n  if (oneCard.paragraph === ''  ||\n     oneNote.wordPhrase === '' ||\n     oneNote.definition === '') {\n       return false\n     }\n\n  var currentParagraph = cleanText(oneCard.paragraph);\n\n\n  var stringsColoredEmp = addEmphasis(currentParagraph, oneNote);\n\n///////// next do wordPhrase  and close\n\n  var arrayOfStringCurrentPhrase = addNoteHighlight(stringsColoredEmp, oneNote);\n\n\n\n/////////////////// next write these out using html tags\n\nvar oneNoteString = arrayOfStringCurrentPhrase.map((oneStringMap, index) => {\n  switch (oneStringMap.type) {\n    case \"wordPhrase\":\n     return \"<font color=\" + oneCard.fontColor + \">\" + oneStringMap.text + \"</font>\"\n   case \"emphasis\":\n   return \"<font color=\" + oneCard.emphasisColor + \">\" + oneStringMap.text + \"</font>\"\n   default:\n   return oneStringMap.text\n }})\n\n  return oneNoteString.join(\"\")\n\n}\n\nfunction makeReading(reading) {\n  if (reading===\"\") {\n    return reading\n  }\n  else {\n    return \"(\" + reading + \")\"\n  }\n}\n\nfunction makeAudio(audio) {\n  if (audio===\"[sound:a.mp3]\") {\n    return \"\"\n  }\n  else {\n    return audio\n  }\n}\n\nfunction cleanText(initialText) {\n  var textMinusNL= initialText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n  var textMinusTab=textMinusNL.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n  var textMinusWhiteSpace=textMinusTab.trim();\n  var finalText = textMinusWhiteSpace;\n  return finalText\n}\n\nfunction makeRestOfCard(card, notes, exportParagraph) {\n  var wordPhrase = cleanText(notes.wordPhrase)\n  var reading=cleanText(makeReading(notes.reading));\n  var definition=cleanText(notes.definition);\n  var audio=cleanText(makeAudio(card.audioPath));\n  var noteAnswer=wordPhrase + reading + \"=\" + definition;\n  var fontColor = cleanText(card.fontColor)\n  var restOfCard={paragraph: exportParagraph, noteAnswer: noteAnswer, audio: audio, fontColor: fontColor};\n  return restOfCard\n}\n\nexport const stateToCards = (currentState) => {\n  var newCards = [];\n  var cardsForExport=[];\n  //for each card\n  for (var i in currentState.cards) {\n    var cardsForExportOneCard=[];\n    /// for each note in one card\n    for (var ni in currentState.cards[i].notes) {\n      var exportParagraph = makeExpPara(currentState.cards[i], currentState.cards[i].notes[ni]);\n      if (!exportParagraph) {\n        return \"Failed on card \" + i\n      }\n      var restOfCard=makeRestOfCard(currentState.cards[i],currentState.cards[i].notes[ni], exportParagraph)\n\n\n      cardsForExportOneCard.push(restOfCard);\n    }\n\n    ///theory is there is something weird happening with overwriting the key value\n    var newCardsCombNotes = [];\n    for (var xi in cardsForExportOneCard) {\n      var compiledNotes = new Array();\n      //compiledNotes.length=0;\n\n      var thisCardsNote = cardsForExportOneCard[xi].noteAnswer; //var noteAnswer=wordPhrase + reading + \"=\" + definition;\n\n\n      //for each\n\n      for (var zi in cardsForExportOneCard) {\n\n        if (cardsForExportOneCard[zi].noteAnswer === thisCardsNote) {\n          var madeBlue = \"<div><font color=\" + cardsForExportOneCard[zi].fontColor + \">\" + cardsForExportOneCard[zi].noteAnswer + \"</font></div>\";\n          compiledNotes.unshift(madeBlue);\n        }\n        else {\n          compiledNotes.push(\"<div>\" + cardsForExportOneCard[zi].noteAnswer + \"</div>\");\n        }\n      }\n      newCards.push({paragraph: cardsForExportOneCard[xi].paragraph,\n        noteAnswer: compiledNotes.join(\"\"),\n        audio: cardsForExportOneCard[xi].audio,\n        fontColor: cardsForExportOneCard[xi].fontColor})\n    }\n  }\n  var cardString=cardMapToString(newCards.flat());\n  return [cardString];\n}\n","import React, { useEffect, useState } from 'react'\n\nexport const SaveList: React.FC = ({list}) => {\n\n  var today = new Date();\n  var dd = String(today.getDate()).padStart(2, '0');\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  var yyyy = today.getFullYear();\n  var theDateCards=yyyy + mm + dd + \"-cards\";\n  // set up local state for generating the download link\n  const [downloadLink, setDownloadLink] = useState('')\n\n  // function for generating file and set download link\n  const makeTextFile = () => {\n    // This creates the file.\n    // In my case, I have an array, and each item in\n    // the array should be on a new line, which is why\n    // I use .join('\\n') here.\n    const data = new Blob([list], { type: 'text/plain' })\n\n    // this part avoids memory leaks\n    if (downloadLink !== '') window.URL.revokeObjectURL(downloadLink)\n\n    // update the download link state\n    setDownloadLink(window.URL.createObjectURL(data))\n  }\n\n  // Call the function if list changes\n  useEffect(() => {\n    makeTextFile()\n  }, [list])\n\n///////////////\n////////////////\n////\n\n\n\n\n  return (\n    <a\n      // this attribute sets the filename\n      download={theDateCards}\n      // link to the download URL\n      href={downloadLink}\n    >\n      <button className=\"btn btn-primary btnWidth\">Export</button>\n    </a>\n  )\n}\n\nexport default SaveList\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../css/Toolbar.css'\nimport { resetState, addCard, deleteCard, addNote, updateDeckElements, editNote } from \"../actions/index\";\nimport {stateToCards} from \"./stateToCards\";\nimport {SaveList} from \"./SaveList\";\n\nconst mapStateToProps = state => {\n  var currentNote={};\n  var currentCard = state.cards.filter(oneCard => oneCard.cardNumber  === state.currentCardNumber)[0];\n  if (typeof currentCard === 'undefined') {\n    var currentCard= {paragraph: '',\n                  audioPath: '',\n                 notes: []}\n  }\n  var currentNote = currentCard.notes.filter(oneNote => oneNote.noteNumber === state.currentNoteNumber)[0];\n  if (typeof currentNote === 'undefined') {\n    var currentNote= {emphasis: false,\n                  noteNumber: 0,\n                  closed: false}\n  }\n  return {\n    currentNoteEmphasis: currentNote.emphasis,\n    currentNoteNumber: currentNote.noteNumber,\n    currentNoteClosed: currentNote.closed,\n    currentNote: currentNote,\n    currentCard: currentCard,\n    notes: currentCard.notes,\n    currentState: state,\n    currentCardNumber: state.currentCardNumber\n    }\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addNote: noteInfo => dispatch(addNote(noteInfo)),\n    editNote: notes => dispatch(editNote(notes)),\n    resetState: nothing => dispatch(resetState(nothing)),\n    addCard: nothing => dispatch(addCard(nothing)),\n    deleteCard: nothing => dispatch(deleteCard(nothing)),\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements)),\n  };\n}\n\n\n\nclass ToolbarDisplay extends Component {\n\n  constructor(props) {\n    super(props);\n    this.resetState = this.resetState.bind(this);\n    this.addCard = this.addCard.bind(this);\n    this.deleteCard = this.deleteCard.bind(this);\n    this.exportState = this.exportState.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.updateNote = this.updateNote.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  updateNote(noteNumber, updatedMap) {\n    let newNotes = this.props.notes.map(singleNote => {\n          if (singleNote.noteNumber === noteNumber) {\n              return Object.assign({}, singleNote, updatedMap )\n            }\n          else {\n            return singleNote;\n          }});\n   return newNotes\n  }\n\n addCard(event) {\n   this.props.addCard();\n }\n\n deleteCard(cardNumber) {\n   if (window.confirm('Are you sure you wish to delete this item?')) {\n     this.props.deleteCard();\n   }\n }\n\n\n// <div className='delete-button' onClick={() => { if (window.confirm('Are you sure you wish to delete this item?')) this.onCancel(item) } } />\n\n\n  exportState() {\n    return stateToCards(this.props.currentState);\n  }\n\n  resetState() {\n  if (window.confirm('Are you sure you want to delete ALL CARDS?')) {\n    this.props.resetState(null);\n  }\n  }\n\n  addNote(event) {\n    this.props.addNote({currentNotes: this.props.notes,\n                        currentCard: this.props.currentCard});\n  }\n\n  handleClose() {\n    var newNotes=this.updateNote(this.props.currentNoteNumber, {closed: !this.props.currentNoteClosed});\n    this.props.editNote({notes: newNotes});\n  }\n\n  handleEmphasis() {\n    var newNotes=this.updateNote(this.props.currentNoteNumber, {emphasis: !this.props.currentNoteEmphasis});\n    this.props.editNote({notes: newNotes});\n  }\n\n\n  render() {\n  return (\n    <div>\n      <div className='toolbar d-grid gap-2 col-2 mx-auto'>\n      <button className=\"btn btn-info btnWidth\"\n              id=\"addNote\"\n              value=\"Add Note\"\n              onClick={this.addNote} >Add Card</button>\n      <button className=\"btn btn-info btnWidth\" onClick={(event) => this.handleClose()}>Close</button>\n      <button className=\"btn btn-info btnWidth\" onClick={(event) => this.handleEmphasis()}>Emphasis</button>\n      <button className=\"btn btn-primary btnWidth\" id=\"addCard\" onClick={this.addCard}>Add Note</button>\n      <button className=\"btn btn-danger btnWidth\" id=\"deleteCard\" onClick={this.deleteCard}>Delete Note</button>\n      <button className=\"btn btn-danger btnWidth\" onClick={this.resetState}>Reset Deck</button>\n      <SaveList list={this.exportState()}/>\n      </div>\n    </div>\n  )\n}\n}\n\nconst Toolbar = connect(mapStateToProps, mapDispatchToProps)(ToolbarDisplay);\n\nexport default Toolbar;\n\n\n/*\n<div className=\"inputDiv\"> <input type=\"checkbox\"\n                id=\"closed\"\n                checked={el.closed}\n                onChange={(event) => this.handleClose(el.noteNumber, el.closed)}></input>\n                */\n","export default __webpack_public_path__ + \"static/media/red-circle.4f16077e.png\";","// src/js/components/CardNotes.js\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { editNote,\n         updateDeckElements,\n         addNote,\n         deleteNote,\n         changeNoteNumber} from \"../actions/index\";\nimport '../../css/CardNotes.css';\nimport redCircle from '../../img/red-circle.png';\n\nconst mapStateToProps = state => {\n  var currentCard = state.cards.filter(oneCard => oneCard.cardNumber  === state.currentCardNumber)[0];\n  if (typeof currentCard === 'undefined') {\n    var currentCard= {paragraph: '',\n                  audioPath: '',\n                 notes: []}\n  }\n  var currentNote = currentCard.notes.filter(oneNote => oneNote.noteNumber === state.currentNoteNumber)[0];\n\n  if (typeof currentNote === 'undefined') {\n    var currentNote = {emphasis: false,\n                  noteNumber: 0,\n                  closed: false,\n                  currentNotePhrase: \"\"}\n  }\n  return {\n    currentNoteNumber: currentNote.noteNumber,\n    currentNoteClosed: currentNote.closed,\n    currentNotePhrase: currentNote.wordPhrase,\n    currentCard: currentCard,\n    notes: currentCard.notes,\n    currentNoteEmphasis: currentNote.emphasis,\n    currentCardNumber: state.currentCardNumber,\n    showReading: state.showReading\n    }\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    // edit note will takes the notes provided and replace them in the state\n    // expects a map of {notes: newNotesArray}\n    editNote: notes => dispatch(editNote(notes)),\n// expect a map of items in the outter most layer (the deck)\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements)),\n    addNote: noteInfo => dispatch(addNote(noteInfo)),\n    deleteNote: notesNoteNumber => dispatch(deleteNote(notesNoteNumber)),\n    ////\n    changeNoteNumber: newNoteNumberInfo => dispatch(changeNoteNumber(newNoteNumberInfo)),\n  };\n}\n\nclass NoteDisplay extends Component {\n  constructor(props) {\n    super(props);\n    //this.addNote = this.addNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n    this.liStyle = this.liStyle.bind(this);\n    this.changeCurrentNoteNumber = this.changeCurrentNoteNumber.bind(this);\n    this.handleWordPhrase = this.handleWordPhrase.bind(this);\n    this.updateNote = this.updateNote.bind(this);\n    this.wordPhraseClass = this.wordPhraseClass.bind(this);\n  }\n\n\n\n  /*addNote(event) {\n    this.props.addNote({currentNotes: this.props.notes,\n                        currentCard: this.props.currentCard});\n  }*/\n\n  deleteNote(noteNumber) {\n      if (window.confirm('Are you sure you want to delete this note?')) {\n    this.props.deleteNote({noteNumber: noteNumber,\n                            currentNotes: this.props.notes});\n    }\n  }\n\n//this is for selecting the note (to highlight the notes features in the paragraph)\n// so with a new note we'll have to update if it's closed, if it's emphasized, what it's emphasis is and what phrase is blue\n// we can do all these things here or do it all in the reducer\n//currentNoteEmphasisPhrase: \"\",\n//currentNoteClosed: false,\n//currentNoteEhphasis: false,\n//currentNoteHint: \"\".\n  changeCurrentNoteNumber(noteNumber, wordPhrase, emphasis, emphasisPhrase, closed, hint) {\n    var newMap = {currentNoteNumber: noteNumber}\n    this.props.updateDeckElements(newMap);\n  }\n\n//returns new notes  uses card number in state\n  updateNote(noteNumber, updatedMap) {\n    let newNotes = this.props.notes.map(singleNote => {\n          if (singleNote.noteNumber === noteNumber) {\n              return Object.assign({}, singleNote, updatedMap )\n            }\n          else {\n            return singleNote;\n          }});\n   return newNotes\n  }\n\n  handleWordPhrase(event, noteNumber) {\n    var newNotes=this.updateNote(noteNumber, {wordPhrase: event.target.value});\n    this.props.editNote({notes: newNotes});\n  }\n\n  handleReading(event, noteNumber) {\n    var newNotes=this.updateNote(noteNumber, {reading: event.target.value});\n    /// doesn't have a current element\n    this.props.editNote({notes: newNotes});\n  }\n  handleDefinition(event, noteNumber) {\n    var newNotes=this.updateNote(noteNumber, {definition: event.target.value});\n    /// doesn't have a current element\n    this.props.editNote({notes: newNotes});\n  }\n\n\n\n  handleEmphasisPhrase(event, noteNumber) {\n    var newNotes=this.updateNote(noteNumber, {emphasisPhrase: event.target.value});\n    this.props.updateDeckElements({currentNoteEmphasisPhrase: event.target.value});\n    this.props.editNote({notes: newNotes});\n  }\n\n  handleClose(noteNumber, closeNow) {\n    var newNotes=this.updateNote(noteNumber, {closed: !closeNow});\n    this.props.updateDeckElements({currentNoteClosed: !closeNow});\n    this.props.editNote({notes: newNotes});\n  }\n  handleHint(event, noteNumber) {\n    var newNotes=this.updateNote(noteNumber, {hint: event.target.value});\n    this.props.updateDeckElements({currentNoteHint: event.target.value});\n    this.props.editNote({notes: newNotes});\n  }\n\n  liStyle (noteNumber) {\n    if (noteNumber === this.props.currentNoteNumber) {\n      return {borderColor:\"#909090\", borderStyle: \"solid\"}\n    }\n    else {\n      return {borderColor:\"#484848\", borderStyle: \"solid\"}\n    }\n  }\n\n  wordPhraseClass () {\n    // invalidInput\n    return \"noteText form-control noteZone\"\n  }\n\n\n  render() {\n    return (\n      <div className=\"noteContainer container noteZone\">\n      <div className=\"row noteZone\">\n      <ul className=\"noteZone\" id=\"noteList\">\n        {\n          this.props.notes.slice(0).reverse().map(el => {\n          const currentKey=this.props.currentCardNumber + \"noteNumber\" + el.noteNumber;\n          return <li>\n            <div  key={currentKey}\n                    style={this.liStyle(el.noteNumber)}\n                    id={currentKey}\n                    className=\"shadow oneNoteInputGroup container noteZone\"\n                    onClick={() => this.changeCurrentNoteNumber(el.noteNumber, el.wordPhrase, el.emphasis, el.emphasisPhrase, el.closed, el.hint)}>\n                   <img alt=\"\" onClick={() => this.deleteNote(el.noteNumber)} className=\"redCircle\" src={redCircle}></img>\n\n                    <div className=\"inputDiv row noteZone\">\n                  <textarea\n                    className={this.wordPhraseClass()}\n                    type=\"text\"\n                    id=\"wordPhrase\"\n                    placeholder=\"Word or Phrase\"\n                    value={el.wordPhrase}  //{this.props.paragraph}\n                    onChange={(event) => this.handleWordPhrase(event, el.noteNumber)}\n                  />\n                  </div>\n                  {this.props.showReading &&\n                  <div className=\"inputDiv row noteZone\">\n                   <textarea\n                     className=\"noteText form-control noteZone\"\n                     type=\"text\"\n                     id=\"reading\"\n                     placeholder=\"Reading (if any)\"\n                     value={el.reading}  //{this.props.paragraph}\n                     onChange={(event) => this.handleReading(event, el.noteNumber)}\n                   /></div>}\n                   <div className=\"inputDiv row noteZone\">\n                   <textarea\n                     className=\"noteText form-control noteZone\"\n                     type=\"text\"\n                     id=\"definition\"\n                     placeholder=\"Definition\"\n                     value={el.definition}  //{this.props.paragraph}\n                     onChange={(event) => this.handleDefinition(event, el.noteNumber)}\n                   />\n                   </div>\n\n                    {el.emphasis &&\n                      <div className=\"inputDiv row noteZone\">\n                      <textarea\n                          className=\"noteText form-control noteZone\"\n                          type=\"text\"\n                          id=\"emphasisPhrase\"\n                          placeholder=\"Highlight any surrounding context\"\n                          value={el.emphasisPhrase}  //{this.props.paragraph}\n                          onChange={(event) => this.handleEmphasisPhrase(event, el.noteNumber)}\n                        /></div>}\n\n\n                   {el.closed &&\n                     <div className=\"inputDiv row noteZone\">\n                     <textarea\n                       className=\"noteText form-control noteZone\"\n                       type=\"text\"\n                       id=\"hint\"\n                       placeholder=\"Hint for Cloze\"\n                       value={el.hint}  //{this.props.paragraph}\n                       onChange={(event) => this.handleHint(event, el.noteNumber)}\n                     /></div>}\n                     </div>\n                  </li>\n        })\n      }\n      </ul>\n      </div>\n      </div>\n    );\n  }\n}\n\nconst CardNotes = connect(mapStateToProps,mapDispatchToProps)(NoteDisplay);\n\nexport default CardNotes;\n\n\n\n/*\n  <button className=\"btn btn-danger\" id=\"deleteNote\" onClick={() => this.deleteNote(el.noteNumber)}>Delete Note</button>\n\n*/\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../css/SingleParagraph.css';\nimport { updateDeckElements, editParagraph, updateAudio } from \"../actions/index\";\n\n\n/*\ncurrentNoteEmphasisPhrase: \"\",\ncurrentNoteClosed: false,\ncurrentNoteEhphasis: false,\ncurrentNoteHint: \"\".\ncurrentNotePhrase: \"\",\n*/\n\nconst mapStateToProps = state => {\n  var currentCard = state.cards.filter(oneCard => oneCard.cardNumber  === state.currentCardNumber)[0];\n  if (typeof currentCard === 'undefined') {\n    var currentCard= {paragraph: '',\n                  audioPath: '',\n                 notes: []}\n  }\n  var currentNote = currentCard.notes.filter(oneNote => oneNote.noteNumber === state.currentNoteNumber)[0];\n\n  if (typeof currentNote === 'undefined') {\n    var currentNote= {emphasis: false,\n                  noteNumber: 0,\n                  closed: false,\n                  currentNotePhrase: \"\"}\n  }\n  const toReturn={ currentCardNumber: state.currentCardNumber,\n                   cards: state.cards,\n                   currentNotePhrase: currentNote.wordPhrase,\n                   currentNoteEmphasisPhrase: currentNote.emphasisPhrase,\n                   currentNoteEmphasis: currentNote.emphasis,\n                   currentNoteClosed: currentNote.closed,\n                   currentNoteHint: currentNote.hint,\n                   edit: state.edit,\n                   paragraph: currentCard.paragraph,\n                   audioPath: currentCard.audioPath,\n                   showAudio: state.showAudio}\n  return toReturn;\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements)),\n    editParagraph: paragraph => dispatch(editParagraph(paragraph)),\n    updateAudio: audioMap => dispatch(updateAudio(audioMap))\n  };\n}\n\nclass OneParagraph extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAudioChange = this.handleAudioChange.bind(this);\n     this.editButton = this.editButton.bind(this);\n    this.editClick= this.editClick.bind(this);\n    this.quote=this.quote.bind(this);\n    this.cleanText = this.cleanText.bind(this);\n  }\n\n  handleAudioChange(event) {\n    const audio = event.target.value;\n    this.props.updateAudio({audioPath: audio });\n  }\n\n  handleChange(event) {\n    const paragraph = event.target.value;\n    this.props.editParagraph({ paragraph });\n  }\n\n  editButton() {\n    if (this.props.edit) {\n      return (<button className=\"btn btn-danger btn-sm editButton\">Save</button>)\n\n    }\n    else {\n      return (<button className=\"btn btn-primary btn-sm editButton\">Edit</button>)\n    }\n  }\n\n  editClick() {\n    this.props.updateDeckElements({edit: !this.props.edit});\n  }\n\n  quote(regex) {\n    return regex.replace(/([()[{*+.$^\\\\|?])/g, '\\\\$1');\n  }\n\n  cleanText(initialText) {\n    var textMinusNL= initialText.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n    var textMinusTab=textMinusNL.replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n    var textMinusWhiteSpace=textMinusTab.trim();\n    var finalText = textMinusWhiteSpace;\n    return finalText\n  }\n\n  /// green before the blue\n  // green after the blue\n  // green before and after the blue\n  /// would blue ever be both green and black? // assume no\n  // which means blue is either in green or not in green\n\n    render() {\n\n      const cards=this.props.cards;\n      const currentCardNumber=this.props.currentCardNumber;\n      const currentCard = cards.filter(oneCard => oneCard.cardNumber === currentCardNumber)[0];\n      const currentParagraph = currentCard.paragraph;\n      var currentNoteEmphasisPhrase = this.props.currentNoteEmphasisPhrase;\n      //console.log(\"this.quote(currentNoteEmphasisPhrase\");\n      //console.log(this.quote(currentNoteEmphasisPhrase));\n\n      //part of changing text that will break regex\n      if (typeof currentNoteEmphasisPhrase === 'undefined' || currentNoteEmphasisPhrase.includes(\"\\\\\")) {\n        currentNoteEmphasisPhrase=\"\";\n      }\n      ///the regex is the emphasis phrase so it can be split at in the paragraph\n      var noteEmphasisRegex = new RegExp(\"(\" + this.props.currentNoteEmphasisPhrase + \")\");\n      var arrayOfStringsEmphasis = [];\n      if (this.props.currentNoteEmphasisPhrase !== \"\") {\n        arrayOfStringsEmphasis = currentParagraph.split(noteEmphasisRegex);\n      } else {\n          arrayOfStringsEmphasis.push(currentParagraph);\n      }\n      var stringsColoredEmp = []\n      for (var index in arrayOfStringsEmphasis) {\n        if (this.props.currentNoteEmphasis && arrayOfStringsEmphasis[index]===this.props.currentNoteEmphasisPhrase) {\n          stringsColoredEmp.push({type: \"emphasis\",\n                                  text: arrayOfStringsEmphasis[index]})\n        }\n        else {\n          stringsColoredEmp.push({type: \"normal\",\n                                  text: arrayOfStringsEmphasis[index]})\n        }\n      }\n       // for each string in the array split it on the currentnote phrase and then make sure it's in the right spot then return it\n       //eventually what we have is an array of normal plus green  then we check normal and if our blue is found in normal seperate it,\n       // cards = [{text: \"fdsfsdf\",\n        ///         color: \"green\"}]\n\n      // basically we're going to search for this phrase (because we're splitting the paragraph on this phrase)\n      var currentNotePhrase = this.props.currentNotePhrase;\n      if (typeof currentNotePhrase === 'undefined' || currentNotePhrase.includes(\"\\\\\")) {\n        currentNotePhrase=\"\";\n      }\n      var currentPhraseRegex = new RegExp(\"(\" + currentNotePhrase + \")\");\n      var arrayOfStringCurrentPhrase = []\n      for (var indexStrEmp in stringsColoredEmp) {\n        var splitForPhrase=[]\n        splitForPhrase = stringsColoredEmp[indexStrEmp].text.split(currentPhraseRegex);\n        for (var indexSecond in splitForPhrase) {\n          if (splitForPhrase[indexSecond] === currentNotePhrase) {\n            if (this.props.currentNoteClosed && currentNotePhrase !== \"\") {\n              arrayOfStringCurrentPhrase.push({type: \"wordPhrase\",\n                                             text: \"(\" + this.props.currentNoteHint + \") \"})\n            }\n            else {\n              arrayOfStringCurrentPhrase.push({type: \"wordPhrase\",\n                                             text: splitForPhrase[indexSecond]})\n                                           }\n          }\n          else {\n            arrayOfStringCurrentPhrase.push({type: stringsColoredEmp[indexStrEmp].type,\n                                             text: splitForPhrase[indexSecond]})\n          }\n        }\n      }\n\n\n  return (\n    <div key=\"maindiv\" className=\"container paragraphEditor\">\n    <div className=\"row\">\n  <div key=\"single1\" className=\"SingleParagraph col-10\">\n   {!this.props.edit && arrayOfStringCurrentPhrase.map((oneStringMap, index) => {\n     switch (oneStringMap.type) {\n       case \"wordPhrase\":\n        return <font key={index} color=\"sky blue\">{oneStringMap.text}</font>\n      case \"emphasis\":\n      return <font key={index} color=\"green\">{oneStringMap.text}</font>\n      default:\n      return <font key={index} color=\"\">{oneStringMap.text}</font>\n    }})}\n    {this.props.edit &&\n      <textarea\n        className=\"editParagraph form-control\"\n        type=\"text\"\n        id=\"paragraph\"\n        value={this.props.paragraph}\n        onChange={this.handleChange}\n      />}\n  </div>\n  <div key=\"single2\" className=\"EditButton col-2 mx-auto\" onClick={this.editClick}>{this.editButton()}</div>\n  </div>\n  <div className=\"container editParagraphAudio\">\n  <div className=\"container editParagraph\">\n  <div className=\"editAudio row p-3\">\n  {this.props.showAudio &&\n  <textarea\n  className=\"form-control\"\n  key=\"single3\"\n    type=\"text\"\n    id=\"audioInput\"\n    placeholder=\"Audio\"\n    value={this.props.audioPath}  //{this.props.paragraph}\n    onChange={(event) => this.handleAudioChange(event)}\n  />}\n  </div>\n  </div>\n  </div>\n  </div>\n);}}\n\nconst SingleParagraph = connect(mapStateToProps, mapDispatchToProps)(OneParagraph);\n\nexport default SingleParagraph;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../css/SidePanel.css';\nimport { updateDeckElements } from \"../actions/index\";\n\n\n\nconst mapStateToProps = state => {\n  var currentCardIndex = state.cards.findIndex(x => x.cardNumber === state.currentCardNumber);\n  if (typeof currentCardIndex === 'undefined') {\n    var currentCardIndex= 0\n  }\n  return {\n    currentCardIndex: currentCardIndex,\n    sidePanelWidth: state.sidePanelWidth,\n    cards: state.cards,\n    currentCardNumber: state.currentCardNumber,\n    edit:  state.edit };\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements))\n  };\n}\n\n\n\n\n\n\nclass CardList extends Component {\n    constructor(props) {\n      super(props);\n      this.handleClick = this.handleClick.bind(this);\n      this.handleCloseNav = this.handleCloseNav.bind(this);\n      this.handleOpenNav = this.handleOpenNav.bind(this);\n    }\n\n    handleCloseNav() {\n        this.props.updateDeckElements({sidePanelWidth: {width: \"0px\"}});\n      //document.getElementById(\"mySidepanel\").style.width = \"0\";\n    }\n\n    handleOpenNav() {\n        this.props.updateDeckElements({sidePanelWidth: {width: \"350px\"}});\n      //document.getElementById(\"mySidepanel\").style.width = \"250px\";\n    }\n\n    handleClick(cardNumber) {\n      this.setState({currendCardNumber: cardNumber});\n      this.props.updateDeckElements({currentCardNumber: cardNumber,\n                                     edit: false})\n    }\n\n\n  render() {\n    return (\n    <div className=\"inSidePanel\">\n    <div id=\"mySidepanel\" className=\"sidepanel inSidePanel\" style={this.props.sidePanelWidth}>\n    <div className=\"closebtn inSidePanel\" onClick={this.handleCloseNav}>&times;</div>\n    <ul className=\"inSidePanel\">\n      {\n        this.props.cards.map((el, cardIndex) => {\n        const currentKey=\"cardNumberSide\" + el.cardNumber;\n        return <li key={currentKey} id={currentKey} className=\"cardParagraph inSidePanel\" onClick={() => this.handleClick(el.cardNumber)}>#{cardIndex+1}:  {el.paragraph}</li>\n      })\n    }\n    </ul>\n    </div>\n       <button className=\"openbtn inSidePanel\" onClick={this.handleOpenNav}>&#9776;</button>\n  </div>\n)\n  }\n\n}\n\n  const SidePanel = connect(mapStateToProps, mapDispatchToProps)(CardList);\n\n  export default SidePanel;\n\n\n\n  /*\n\n  <p>\n  <div id=\"mySidepanel\" class=\"sidepanel\">\n  <a href=\"javascript:void(0)\" class=\"closebtn\" onClick={handleCloseNav}>&times;</a>\n  <ul>\n    {\n      theState.cards.map(el => {\n      const currentKey=\"cardNumber\" + el.cardNumber;\n      return <li key={currentKey} id={currentKey} class=\"cardParagraph\" onClick={() => handleClick(el.cardNumber)}>hey {el.cardNumber} ... {el.paragraph}</li>\n    })\n  }\n  </ul>\n  </div>\n     <button class=\"openbtn\" onClick={handleOpenNav}>&#9776; Toggle Sidepanel</button>\n     <h2>Collapsed Sidepanel</h2>\n     <p>Content...</p>\n</p>\n*/\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport '../../css/TopToolbar.css';\nimport '../../css/SidePanel.css';\nimport { updateDeckElements } from \"../actions/index\";\nimport SidePanel from './SidePanel';\n\n/*\ncurrentNoteEmphasisPhrase: \"\",\ncurrentNoteClosed: false,\ncurrentNoteEhphasis: false,\ncurrentNoteHint: \"\".\ncurrentNotePhrase: \"\",\n*/\n\nconst mapStateToProps = state => {\n  var currentCard = state.cards.filter(oneCard => oneCard.cardNumber  === state.currentCardNumber)[0];\n  var currentCardIndex = state.cards.findIndex(x => x.cardNumber === state.currentCardNumber);\n  if (typeof currentCard === 'undefined') {\n    var currentCard= {paragraph: '',\n                  audioPath: '',\n                 notes: []}\n  }\n  if (typeof currentCardIndex === 'undefined') {\n    var currentCardIndex= 0\n  }\n  const toReturn={ totalCards: state.cards.length,\n                  currentCardIndex: currentCardIndex,\n                  cards: state.cards,\n                   currentCard: currentCard,\n                   currentCardNumber: state.currentCardNumber,\n                   showReading: state.showReading,\n                   showAudio: state.showAudio}\n  return toReturn;\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements)),\n  };\n}\n\n\nclass CountComp extends Component {\n  constructor(props) {\n    super(props);\n    this.currentCount = this.currentCount.bind(this);\n    this.showReading = this.showReading.bind(this);\n    this.cardDown = this.cardDown.bind(this);\n    this.state = {\n     };\n  }\n\n  currentCount() {\n    const cards=this.props.cards;\n    var theCount=0;\n    for (var i in cards) {\n      for (var x in cards[i].notes) {\n        theCount++;\n      }\n    }\n    return theCount\n  }\n\n  showReading() {\n    if (this.props.showReading) {\n      return \"btn btn-success btn-sm topButton\"\n    }\n    else return \"btn btn-light btn-sm topButton\"\n  }\n\n  showAudio() {\n    if (this.props.showAudio) {\n      return \"btn btn-success btn-sm topButton\"\n    }\n    else return \"btn btn-light btn-sm topButton\"\n  }\n\n  handleReading() {\n    this.props.updateDeckElements({showReading: !this.props.showReading});\n  }\n\n  handleAudio() {\n    this.props.updateDeckElements({showAudio: !this.props.showAudio});\n  }\n\n\n\n  cardDown() {\n    if (this.props.currentCardIndex-1 >= 0) {\n      var newCardIndexNumber = this.props.currentCardIndex-1;\n    }\n    else {\n      var newCardIndexNumber = this.props.currentCardIndex\n    }\n\n    var newCardNumber = this.props.cards[newCardIndexNumber].cardNumber\n    this.props.updateDeckElements({currentNoteNumber: 0,\n                                    currentCardNumber: newCardNumber});\n  }\n\n  cardUp() {\n    var cardCount = this.props.cards.length;\n    if (this.props.currentCardIndex+1 < cardCount) {\n      var newCardIndexNumber = this.props.currentCardIndex+1;\n    }\n    else {\n      var newCardIndexNumber = this.props.currentCardIndex\n    }\n\n    var newCardNumber = this.props.cards[newCardIndexNumber].cardNumber\n    this.props.updateDeckElements({currentNoteNumber: 0,\n                                    currentCardNumber: newCardNumber});\n\n  }\n\n    render() {\n\n\n  return (\n    <div className=\"container-fluid topToolBar\">\n    <div className=\"row\">\n    <div className=\"col-3\"><SidePanel/></div>\n    <div className=\"col-3\"> </div>\n    <div className=\"col-3\"><div className=\"arrows\" onClick={(event) => this.cardDown()}>←</div>&nbsp;&nbsp;&nbsp;{this.props.currentCardIndex+1}/{this.props.totalCards}&nbsp;&nbsp;&nbsp; <div className=\"arrows\" onClick={(event) => this.cardUp()}>→</div></div>\n    <div className=\"col-3\">\n    <button className={this.showReading()} onClick={(event) => this.handleReading()}>Reading</button>\n    <button className={this.showAudio()} onClick={(event) => this.handleAudio()}>Audio</button>\n  {this.currentCount()} Cards\n  </div>\n  </div>\n  </div>\n);}}\n\nconst TopToolbar = connect(mapStateToProps, mapDispatchToProps)(CountComp);\n\nexport default TopToolbar;\n\n\n///    <div id=\"arrows\">Hey</div>\n//    <div id=\"TopToolbarRight\">\n","import React, { Component } from \"react\";\nimport Toolbar from './Toolbar';\nimport CardNotes from './CardNotes';\nimport SingleParagraph from './SingleParagraph';\nimport TopToolbar from './TopToolbar';\nimport '../../css/Editor.css';\nimport { connect } from \"react-redux\";\nimport { updateDeckElements} from \"../actions/index\";\n\nconst mapStateToProps = state => {\n  return { currentCardNumber: state.currentCardNumber,\n          cards:  state.cards,\n          edit:  state.edit };\n};\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    updateDeckElements: newDeckElements => dispatch(updateDeckElements(newDeckElements))\n  };\n}\n\n\n//// only show editor of currentCardNumber exists\n//// can't delete card 0 or can create card always\n/// addnewcard should set currentcard as newcard\n\nclass ConnectedEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.currentCardNumberValid = this.currentCardNumberValid.bind(this);\n    this.handleWholeClick = this.handleWholeClick.bind(this);\n  }\n\n  currentCardNumberValid() {\n    for (var cardIndex in this.props.cards) {\n      if (this.props.cards[cardIndex].cardNumber === this.props.currentCardNumber) {\n        return true\n      }\n    }\n    return false\n  }\n\n  handleWholeClick(event) {\n    if (!event.target.className.includes(\"inSidePanel\")) {\n      this.props.updateDeckElements({sidePanelWidth: {width: \"0px\"}});\n    }\n    //console.log(\"click\");\n    //console.log(!event.target.className.includes(\"editParagraph\"))\n    //console.log(event.target.id)\n    //console.log(this.props.edit)\n    if (event.target.className.includes(\"noteZone\") &&\n        //event.target.id !== \"addCard\" &&\n        this.props.edit) {\n      this.props.updateDeckElements({edit: false});\n    }\n\n  }\n\n\n\n  render() {\n    let someTest=null\n    if (this.currentCardNumberValid()) {\n        someTest=(  <div className=\"editor\">\n        <SingleParagraph />\n        <CardNotes />\n        </div>)\n      }\n    return (\n  <div id=\"wholePage\" onClick={(event) => this.handleWholeClick(event)}>\n\n    <TopToolbar />\n      <Toolbar />\n   {someTest}\n  </div>\n)\n}\n}\n\nconst Editor = connect(mapStateToProps, mapDispatchToProps)(ConnectedEditor);\nexport default Editor;\n","import React from \"react\";\nimport Editor from \"./Editor\";\n//import Form from \"./Form\";\n//import List from \"./List\";\nimport '../../css/bootstrap.min.css'\nimport '../../css/App.css'\n\n//ximport SidePanel from \"./SidePanel\";\n\nconst App = () => (\n  <>\n    <div className=\"appGeneral\">\n      <Editor />\n    </div>\n  </>\n);\n\nexport default App;\n\n\n/// features bugs\n/// doesn't format correctly with new lines\n/// [ ] can't exist in audio file names\n/// sidepanel numbers are index numbers instead (fixed?)\n// failed on card should return error\n//  large paragraphs don't fit well\n// especially with audio visible\n// special characters probably just need to be escaped\n// paragraph input only automatically closes if it's nto empty\n// fails if missing definition\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./js/store/index\";\nimport App from \"./js/components/App\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}